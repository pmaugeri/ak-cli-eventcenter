#!/usr/bin/env node

"use strict";

var path = require('path');
let untildify = require('untildify');
let akEventCenter = require('../index').akEventCenter;

let app = "akamai eventcenter";

let config = untildify("~/.edgerc");
let debug = false;
let targetProperty;
let searchString;

function main () {
    process.argv[1] = 'akamai eventcenter'
    const chalk = require('chalk')
    return require('sywac')
    .file('--config <config>', { 
        desc: 'Config file',
        defaultValue: untildify("~/.edgerc")
    })
      .string('--section <section>', { 
        desc: 'Section for config file',
        defaultValue: "default"
      })
     .command('hello', {
        desc: 'Say Hello World!',
        run: options => {
           let app = new akEventCenter(options);
            return setup(app, options);
          }
      })
 
      .showHelpByDefault()
      .help('--help', { group: "Command options:"})
      .version('--version', { group: "Command options:"})
      .epilogue('Visit https://github.com/pmaugeri/ak-cli-eventcenter for detailed documentation\n')
      .style({
        // you can style several other things too
        // and even style things differently when validation fails for them
        // see http://sywac.io/docs/sync-config.html#style
        group: str => chalk.blue.bold(str),
      })
      .style({
        group: str => chalk.bold.blue(str === 'Options:' ? 'General options:' : str)
      })
      .outputSettings({ maxWidth: 90 })
      .parse()
      .then(result => {
        // let errors bubble up
        if (result.errors.length) {
            console.error(chalk.red.bold("\nERROR: \n\t"), result.output || JSON.stringify(result.output[0]));
            console.output = "";
        } else if (result.output) {
          console.log(result.output)
          process.exit(result.code)
        }
    })
}
  console.time(app);
  var begin=Date.now();
  
  main().then(options => {
    var end=Date.now();
    var timeSpent=((end-begin)/1000/60).toPrecision(2) +" mins";
  })                                               
